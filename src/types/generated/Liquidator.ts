/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type MultiCallStruct = { target: AddressLike; callData: BytesLike };

export type MultiCallStructOutput = [target: string, callData: string] & {
  target: string;
  callData: string;
};

export type LiquidationResultStruct = {
  calls: MultiCallStruct[];
  profit: BigNumberish;
  amountIn: BigNumberish;
  amountOut: BigNumberish;
};

export type LiquidationResultStructOutput = [
  calls: MultiCallStructOutput[],
  profit: bigint,
  amountIn: bigint,
  amountOut: bigint
] & {
  calls: MultiCallStructOutput[];
  profit: bigint;
  amountIn: bigint;
  amountOut: bigint;
};

export declare namespace IPartialLiquidationBotV3 {
  export type PriceUpdateStruct = {
    token: AddressLike;
    reserve: boolean;
    data: BytesLike;
  };

  export type PriceUpdateStructOutput = [
    token: string,
    reserve: boolean,
    data: string
  ] & { token: string; reserve: boolean; data: string };
}

export interface LiquidatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "aaveFLTaker"
      | "aavePool"
      | "cmToCA"
      | "executeOperation"
      | "getOptimalLiquidation"
      | "owner"
      | "partialLiquidateAndConvert"
      | "partialLiquidationBot"
      | "previewPartialLiquidation"
      | "registerCM"
      | "renounceOwnership"
      | "router"
      | "setPartialLiquidationBot"
      | "setRouter"
      | "transferOwnership"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "SetPartialLiquidationBot"
      | "SetRouter"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "aaveFLTaker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "aavePool", values?: undefined): string;
  encodeFunctionData(functionFragment: "cmToCA", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "executeOperation",
    values: [
      AddressLike[],
      BigNumberish[],
      BigNumberish[],
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOptimalLiquidation",
    values: [
      AddressLike,
      BigNumberish,
      IPartialLiquidationBotV3.PriceUpdateStruct[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "partialLiquidateAndConvert",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      IPartialLiquidationBotV3.PriceUpdateStruct[],
      MultiCallStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "partialLiquidationBot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previewPartialLiquidation",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      IPartialLiquidationBotV3.PriceUpdateStruct[],
      AddressLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCM",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setPartialLiquidationBot",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "aaveFLTaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aavePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cmToCA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptimalLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partialLiquidateAndConvert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partialLiquidationBot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewPartialLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registerCM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPartialLiquidationBot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPartialLiquidationBotEvent {
  export type InputTuple = [partialLiquidationBot: AddressLike];
  export type OutputTuple = [partialLiquidationBot: string];
  export interface OutputObject {
    partialLiquidationBot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetRouterEvent {
  export type InputTuple = [newRouter: AddressLike];
  export type OutputTuple = [newRouter: string];
  export interface OutputObject {
    newRouter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Liquidator extends BaseContract {
  connect(runner?: ContractRunner | null): Liquidator;
  waitForDeployment(): Promise<this>;

  interface: LiquidatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  aaveFLTaker: TypedContractMethod<[], [string], "view">;

  aavePool: TypedContractMethod<[], [string], "view">;

  cmToCA: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  executeOperation: TypedContractMethod<
    [
      assets: AddressLike[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: AddressLike,
      params: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  getOptimalLiquidation: TypedContractMethod<
    [
      creditAccount: AddressLike,
      hfOptimal: BigNumberish,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[]
    ],
    [
      [string, bigint, bigint, bigint, boolean] & {
        tokenOut: string;
        optimalAmount: bigint;
        repaidAmount: bigint;
        flashLoanAmount: bigint;
        isOptimalRepayable: boolean;
      }
    ],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  partialLiquidateAndConvert: TypedContractMethod<
    [
      creditManager: AddressLike,
      creditAccount: AddressLike,
      assetOut: AddressLike,
      amountOut: BigNumberish,
      flashLoanAmount: BigNumberish,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
      conversionCalls: MultiCallStruct[]
    ],
    [void],
    "nonpayable"
  >;

  partialLiquidationBot: TypedContractMethod<[], [string], "view">;

  previewPartialLiquidation: TypedContractMethod<
    [
      creditManager: AddressLike,
      creditAccount: AddressLike,
      assetOut: AddressLike,
      amountOut: BigNumberish,
      flashLoanAmount: BigNumberish,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
      connectors: AddressLike[],
      slippage: BigNumberish
    ],
    [LiquidationResultStructOutput],
    "nonpayable"
  >;

  registerCM: TypedContractMethod<
    [creditManager: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  router: TypedContractMethod<[], [string], "view">;

  setPartialLiquidationBot: TypedContractMethod<
    [newPLB: AddressLike],
    [void],
    "nonpayable"
  >;

  setRouter: TypedContractMethod<
    [newRouter: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "aaveFLTaker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "aavePool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cmToCA"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "executeOperation"
  ): TypedContractMethod<
    [
      assets: AddressLike[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: AddressLike,
      params: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getOptimalLiquidation"
  ): TypedContractMethod<
    [
      creditAccount: AddressLike,
      hfOptimal: BigNumberish,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[]
    ],
    [
      [string, bigint, bigint, bigint, boolean] & {
        tokenOut: string;
        optimalAmount: bigint;
        repaidAmount: bigint;
        flashLoanAmount: bigint;
        isOptimalRepayable: boolean;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "partialLiquidateAndConvert"
  ): TypedContractMethod<
    [
      creditManager: AddressLike,
      creditAccount: AddressLike,
      assetOut: AddressLike,
      amountOut: BigNumberish,
      flashLoanAmount: BigNumberish,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
      conversionCalls: MultiCallStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "partialLiquidationBot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "previewPartialLiquidation"
  ): TypedContractMethod<
    [
      creditManager: AddressLike,
      creditAccount: AddressLike,
      assetOut: AddressLike,
      amountOut: BigNumberish,
      flashLoanAmount: BigNumberish,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
      connectors: AddressLike[],
      slippage: BigNumberish
    ],
    [LiquidationResultStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerCM"
  ): TypedContractMethod<[creditManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setPartialLiquidationBot"
  ): TypedContractMethod<[newPLB: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRouter"
  ): TypedContractMethod<[newRouter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetPartialLiquidationBot"
  ): TypedContractEvent<
    SetPartialLiquidationBotEvent.InputTuple,
    SetPartialLiquidationBotEvent.OutputTuple,
    SetPartialLiquidationBotEvent.OutputObject
  >;
  getEvent(
    key: "SetRouter"
  ): TypedContractEvent<
    SetRouterEvent.InputTuple,
    SetRouterEvent.OutputTuple,
    SetRouterEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetPartialLiquidationBot(address)": TypedContractEvent<
      SetPartialLiquidationBotEvent.InputTuple,
      SetPartialLiquidationBotEvent.OutputTuple,
      SetPartialLiquidationBotEvent.OutputObject
    >;
    SetPartialLiquidationBot: TypedContractEvent<
      SetPartialLiquidationBotEvent.InputTuple,
      SetPartialLiquidationBotEvent.OutputTuple,
      SetPartialLiquidationBotEvent.OutputObject
    >;

    "SetRouter(address)": TypedContractEvent<
      SetRouterEvent.InputTuple,
      SetRouterEvent.OutputTuple,
      SetRouterEvent.OutputObject
    >;
    SetRouter: TypedContractEvent<
      SetRouterEvent.InputTuple,
      SetRouterEvent.OutputTuple,
      SetRouterEvent.OutputObject
    >;
  };
}
