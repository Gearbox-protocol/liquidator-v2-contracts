/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type MultiCallStruct = { target: AddressLike; callData: BytesLike };

export type MultiCallStructOutput = [target: string, callData: string] & {
  target: string;
  callData: string;
};

export interface ICreditFacadeV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "botList"
      | "botMulticall"
      | "canLiquidateWhilePaused"
      | "closeCreditAccount"
      | "creditManager"
      | "debtLimits"
      | "degenNFT"
      | "expirable"
      | "expirationDate"
      | "forbiddenTokenMask"
      | "liquidateCreditAccount"
      | "lossParams"
      | "maxDebtPerBlockMultiplier"
      | "maxQuotaMultiplier"
      | "multicall"
      | "openCreditAccount"
      | "setBotList"
      | "setBotPermissions"
      | "setCumulativeLossParams"
      | "setDebtLimits"
      | "setEmergencyLiquidator"
      | "setExpirationDate"
      | "setTokenAllowance"
      | "version"
      | "weth"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddCollateral"
      | "CloseCreditAccount"
      | "DecreaseDebt"
      | "Execute"
      | "FinishMultiCall"
      | "IncreaseDebt"
      | "LiquidateCreditAccount"
      | "OpenCreditAccount"
      | "StartMultiCall"
      | "WithdrawCollateral"
  ): EventFragment;

  encodeFunctionData(functionFragment: "botList", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "botMulticall",
    values: [AddressLike, MultiCallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "canLiquidateWhilePaused",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closeCreditAccount",
    values: [AddressLike, MultiCallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "creditManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtLimits",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "degenNFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "expirable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "expirationDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forbiddenTokenMask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateCreditAccount",
    values: [AddressLike, AddressLike, MultiCallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lossParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDebtPerBlockMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxQuotaMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [AddressLike, MultiCallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "openCreditAccount",
    values: [AddressLike, MultiCallStruct[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBotList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBotPermissions",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCumulativeLossParams",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDebtLimits",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyLiquidator",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpirationDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "botList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "botMulticall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canLiquidateWhilePaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtLimits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "degenNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expirable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "expirationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forbiddenTokenMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lossParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxDebtPerBlockMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxQuotaMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBotList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBotPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCumulativeLossParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDebtLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpirationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
}

export namespace AddCollateralEvent {
  export type InputTuple = [
    creditAccount: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    creditAccount: string,
    token: string,
    amount: bigint
  ];
  export interface OutputObject {
    creditAccount: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CloseCreditAccountEvent {
  export type InputTuple = [creditAccount: AddressLike, borrower: AddressLike];
  export type OutputTuple = [creditAccount: string, borrower: string];
  export interface OutputObject {
    creditAccount: string;
    borrower: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecreaseDebtEvent {
  export type InputTuple = [creditAccount: AddressLike, amount: BigNumberish];
  export type OutputTuple = [creditAccount: string, amount: bigint];
  export interface OutputObject {
    creditAccount: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteEvent {
  export type InputTuple = [
    creditAccount: AddressLike,
    targetContract: AddressLike
  ];
  export type OutputTuple = [creditAccount: string, targetContract: string];
  export interface OutputObject {
    creditAccount: string;
    targetContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinishMultiCallEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreaseDebtEvent {
  export type InputTuple = [creditAccount: AddressLike, amount: BigNumberish];
  export type OutputTuple = [creditAccount: string, amount: bigint];
  export interface OutputObject {
    creditAccount: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidateCreditAccountEvent {
  export type InputTuple = [
    creditAccount: AddressLike,
    liquidator: AddressLike,
    to: AddressLike,
    remainingFunds: BigNumberish
  ];
  export type OutputTuple = [
    creditAccount: string,
    liquidator: string,
    to: string,
    remainingFunds: bigint
  ];
  export interface OutputObject {
    creditAccount: string;
    liquidator: string;
    to: string;
    remainingFunds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OpenCreditAccountEvent {
  export type InputTuple = [
    creditAccount: AddressLike,
    onBehalfOf: AddressLike,
    caller: AddressLike,
    referralCode: BigNumberish
  ];
  export type OutputTuple = [
    creditAccount: string,
    onBehalfOf: string,
    caller: string,
    referralCode: bigint
  ];
  export interface OutputObject {
    creditAccount: string;
    onBehalfOf: string;
    caller: string;
    referralCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StartMultiCallEvent {
  export type InputTuple = [creditAccount: AddressLike, caller: AddressLike];
  export type OutputTuple = [creditAccount: string, caller: string];
  export interface OutputObject {
    creditAccount: string;
    caller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawCollateralEvent {
  export type InputTuple = [
    creditAccount: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [
    creditAccount: string,
    token: string,
    amount: bigint,
    to: string
  ];
  export interface OutputObject {
    creditAccount: string;
    token: string;
    amount: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICreditFacadeV3 extends BaseContract {
  connect(runner?: ContractRunner | null): ICreditFacadeV3;
  waitForDeployment(): Promise<this>;

  interface: ICreditFacadeV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  botList: TypedContractMethod<[], [string], "view">;

  botMulticall: TypedContractMethod<
    [creditAccount: AddressLike, calls: MultiCallStruct[]],
    [void],
    "nonpayable"
  >;

  canLiquidateWhilePaused: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  closeCreditAccount: TypedContractMethod<
    [creditAccount: AddressLike, calls: MultiCallStruct[]],
    [void],
    "payable"
  >;

  creditManager: TypedContractMethod<[], [string], "view">;

  debtLimits: TypedContractMethod<
    [],
    [[bigint, bigint] & { minDebt: bigint; maxDebt: bigint }],
    "view"
  >;

  degenNFT: TypedContractMethod<[], [string], "view">;

  expirable: TypedContractMethod<[], [boolean], "view">;

  expirationDate: TypedContractMethod<[], [bigint], "view">;

  forbiddenTokenMask: TypedContractMethod<[], [bigint], "view">;

  liquidateCreditAccount: TypedContractMethod<
    [creditAccount: AddressLike, to: AddressLike, calls: MultiCallStruct[]],
    [void],
    "nonpayable"
  >;

  lossParams: TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        currentCumulativeLoss: bigint;
        maxCumulativeLoss: bigint;
      }
    ],
    "view"
  >;

  maxDebtPerBlockMultiplier: TypedContractMethod<[], [bigint], "view">;

  maxQuotaMultiplier: TypedContractMethod<[], [bigint], "view">;

  multicall: TypedContractMethod<
    [creditAccount: AddressLike, calls: MultiCallStruct[]],
    [void],
    "payable"
  >;

  openCreditAccount: TypedContractMethod<
    [
      onBehalfOf: AddressLike,
      calls: MultiCallStruct[],
      referralCode: BigNumberish
    ],
    [string],
    "payable"
  >;

  setBotList: TypedContractMethod<
    [newBotList: AddressLike],
    [void],
    "nonpayable"
  >;

  setBotPermissions: TypedContractMethod<
    [creditAccount: AddressLike, bot: AddressLike, permissions: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCumulativeLossParams: TypedContractMethod<
    [newMaxCumulativeLoss: BigNumberish, resetCumulativeLoss: boolean],
    [void],
    "nonpayable"
  >;

  setDebtLimits: TypedContractMethod<
    [
      newMinDebt: BigNumberish,
      newMaxDebt: BigNumberish,
      newMaxDebtPerBlockMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setEmergencyLiquidator: TypedContractMethod<
    [liquidator: AddressLike, allowance: BigNumberish],
    [void],
    "nonpayable"
  >;

  setExpirationDate: TypedContractMethod<
    [newExpirationDate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenAllowance: TypedContractMethod<
    [token: AddressLike, allowance: BigNumberish],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  weth: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "botList"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "botMulticall"
  ): TypedContractMethod<
    [creditAccount: AddressLike, calls: MultiCallStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canLiquidateWhilePaused"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "closeCreditAccount"
  ): TypedContractMethod<
    [creditAccount: AddressLike, calls: MultiCallStruct[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "creditManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "debtLimits"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { minDebt: bigint; maxDebt: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "degenNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "expirable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "expirationDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "forbiddenTokenMask"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidateCreditAccount"
  ): TypedContractMethod<
    [creditAccount: AddressLike, to: AddressLike, calls: MultiCallStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lossParams"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        currentCumulativeLoss: bigint;
        maxCumulativeLoss: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxDebtPerBlockMultiplier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxQuotaMultiplier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<
    [creditAccount: AddressLike, calls: MultiCallStruct[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "openCreditAccount"
  ): TypedContractMethod<
    [
      onBehalfOf: AddressLike,
      calls: MultiCallStruct[],
      referralCode: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setBotList"
  ): TypedContractMethod<[newBotList: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBotPermissions"
  ): TypedContractMethod<
    [creditAccount: AddressLike, bot: AddressLike, permissions: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCumulativeLossParams"
  ): TypedContractMethod<
    [newMaxCumulativeLoss: BigNumberish, resetCumulativeLoss: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDebtLimits"
  ): TypedContractMethod<
    [
      newMinDebt: BigNumberish,
      newMaxDebt: BigNumberish,
      newMaxDebtPerBlockMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEmergencyLiquidator"
  ): TypedContractMethod<
    [liquidator: AddressLike, allowance: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExpirationDate"
  ): TypedContractMethod<
    [newExpirationDate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenAllowance"
  ): TypedContractMethod<
    [token: AddressLike, allowance: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AddCollateral"
  ): TypedContractEvent<
    AddCollateralEvent.InputTuple,
    AddCollateralEvent.OutputTuple,
    AddCollateralEvent.OutputObject
  >;
  getEvent(
    key: "CloseCreditAccount"
  ): TypedContractEvent<
    CloseCreditAccountEvent.InputTuple,
    CloseCreditAccountEvent.OutputTuple,
    CloseCreditAccountEvent.OutputObject
  >;
  getEvent(
    key: "DecreaseDebt"
  ): TypedContractEvent<
    DecreaseDebtEvent.InputTuple,
    DecreaseDebtEvent.OutputTuple,
    DecreaseDebtEvent.OutputObject
  >;
  getEvent(
    key: "Execute"
  ): TypedContractEvent<
    ExecuteEvent.InputTuple,
    ExecuteEvent.OutputTuple,
    ExecuteEvent.OutputObject
  >;
  getEvent(
    key: "FinishMultiCall"
  ): TypedContractEvent<
    FinishMultiCallEvent.InputTuple,
    FinishMultiCallEvent.OutputTuple,
    FinishMultiCallEvent.OutputObject
  >;
  getEvent(
    key: "IncreaseDebt"
  ): TypedContractEvent<
    IncreaseDebtEvent.InputTuple,
    IncreaseDebtEvent.OutputTuple,
    IncreaseDebtEvent.OutputObject
  >;
  getEvent(
    key: "LiquidateCreditAccount"
  ): TypedContractEvent<
    LiquidateCreditAccountEvent.InputTuple,
    LiquidateCreditAccountEvent.OutputTuple,
    LiquidateCreditAccountEvent.OutputObject
  >;
  getEvent(
    key: "OpenCreditAccount"
  ): TypedContractEvent<
    OpenCreditAccountEvent.InputTuple,
    OpenCreditAccountEvent.OutputTuple,
    OpenCreditAccountEvent.OutputObject
  >;
  getEvent(
    key: "StartMultiCall"
  ): TypedContractEvent<
    StartMultiCallEvent.InputTuple,
    StartMultiCallEvent.OutputTuple,
    StartMultiCallEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawCollateral"
  ): TypedContractEvent<
    WithdrawCollateralEvent.InputTuple,
    WithdrawCollateralEvent.OutputTuple,
    WithdrawCollateralEvent.OutputObject
  >;

  filters: {
    "AddCollateral(address,address,uint256)": TypedContractEvent<
      AddCollateralEvent.InputTuple,
      AddCollateralEvent.OutputTuple,
      AddCollateralEvent.OutputObject
    >;
    AddCollateral: TypedContractEvent<
      AddCollateralEvent.InputTuple,
      AddCollateralEvent.OutputTuple,
      AddCollateralEvent.OutputObject
    >;

    "CloseCreditAccount(address,address)": TypedContractEvent<
      CloseCreditAccountEvent.InputTuple,
      CloseCreditAccountEvent.OutputTuple,
      CloseCreditAccountEvent.OutputObject
    >;
    CloseCreditAccount: TypedContractEvent<
      CloseCreditAccountEvent.InputTuple,
      CloseCreditAccountEvent.OutputTuple,
      CloseCreditAccountEvent.OutputObject
    >;

    "DecreaseDebt(address,uint256)": TypedContractEvent<
      DecreaseDebtEvent.InputTuple,
      DecreaseDebtEvent.OutputTuple,
      DecreaseDebtEvent.OutputObject
    >;
    DecreaseDebt: TypedContractEvent<
      DecreaseDebtEvent.InputTuple,
      DecreaseDebtEvent.OutputTuple,
      DecreaseDebtEvent.OutputObject
    >;

    "Execute(address,address)": TypedContractEvent<
      ExecuteEvent.InputTuple,
      ExecuteEvent.OutputTuple,
      ExecuteEvent.OutputObject
    >;
    Execute: TypedContractEvent<
      ExecuteEvent.InputTuple,
      ExecuteEvent.OutputTuple,
      ExecuteEvent.OutputObject
    >;

    "FinishMultiCall()": TypedContractEvent<
      FinishMultiCallEvent.InputTuple,
      FinishMultiCallEvent.OutputTuple,
      FinishMultiCallEvent.OutputObject
    >;
    FinishMultiCall: TypedContractEvent<
      FinishMultiCallEvent.InputTuple,
      FinishMultiCallEvent.OutputTuple,
      FinishMultiCallEvent.OutputObject
    >;

    "IncreaseDebt(address,uint256)": TypedContractEvent<
      IncreaseDebtEvent.InputTuple,
      IncreaseDebtEvent.OutputTuple,
      IncreaseDebtEvent.OutputObject
    >;
    IncreaseDebt: TypedContractEvent<
      IncreaseDebtEvent.InputTuple,
      IncreaseDebtEvent.OutputTuple,
      IncreaseDebtEvent.OutputObject
    >;

    "LiquidateCreditAccount(address,address,address,uint256)": TypedContractEvent<
      LiquidateCreditAccountEvent.InputTuple,
      LiquidateCreditAccountEvent.OutputTuple,
      LiquidateCreditAccountEvent.OutputObject
    >;
    LiquidateCreditAccount: TypedContractEvent<
      LiquidateCreditAccountEvent.InputTuple,
      LiquidateCreditAccountEvent.OutputTuple,
      LiquidateCreditAccountEvent.OutputObject
    >;

    "OpenCreditAccount(address,address,address,uint256)": TypedContractEvent<
      OpenCreditAccountEvent.InputTuple,
      OpenCreditAccountEvent.OutputTuple,
      OpenCreditAccountEvent.OutputObject
    >;
    OpenCreditAccount: TypedContractEvent<
      OpenCreditAccountEvent.InputTuple,
      OpenCreditAccountEvent.OutputTuple,
      OpenCreditAccountEvent.OutputObject
    >;

    "StartMultiCall(address,address)": TypedContractEvent<
      StartMultiCallEvent.InputTuple,
      StartMultiCallEvent.OutputTuple,
      StartMultiCallEvent.OutputObject
    >;
    StartMultiCall: TypedContractEvent<
      StartMultiCallEvent.InputTuple,
      StartMultiCallEvent.OutputTuple,
      StartMultiCallEvent.OutputObject
    >;

    "WithdrawCollateral(address,address,uint256,address)": TypedContractEvent<
      WithdrawCollateralEvent.InputTuple,
      WithdrawCollateralEvent.OutputTuple,
      WithdrawCollateralEvent.OutputObject
    >;
    WithdrawCollateral: TypedContractEvent<
      WithdrawCollateralEvent.InputTuple,
      WithdrawCollateralEvent.OutputTuple,
      WithdrawCollateralEvent.OutputObject
    >;
  };
}
