/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../common";

export interface ICreditFacadeV3EventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "AddCollateral"
      | "CloseCreditAccount"
      | "DecreaseDebt"
      | "Execute"
      | "FinishMultiCall"
      | "IncreaseDebt"
      | "LiquidateCreditAccount"
      | "OpenCreditAccount"
      | "StartMultiCall"
      | "WithdrawCollateral"
  ): EventFragment;
}

export namespace AddCollateralEvent {
  export type InputTuple = [
    creditAccount: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    creditAccount: string,
    token: string,
    amount: bigint
  ];
  export interface OutputObject {
    creditAccount: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CloseCreditAccountEvent {
  export type InputTuple = [creditAccount: AddressLike, borrower: AddressLike];
  export type OutputTuple = [creditAccount: string, borrower: string];
  export interface OutputObject {
    creditAccount: string;
    borrower: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecreaseDebtEvent {
  export type InputTuple = [creditAccount: AddressLike, amount: BigNumberish];
  export type OutputTuple = [creditAccount: string, amount: bigint];
  export interface OutputObject {
    creditAccount: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteEvent {
  export type InputTuple = [
    creditAccount: AddressLike,
    targetContract: AddressLike
  ];
  export type OutputTuple = [creditAccount: string, targetContract: string];
  export interface OutputObject {
    creditAccount: string;
    targetContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinishMultiCallEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreaseDebtEvent {
  export type InputTuple = [creditAccount: AddressLike, amount: BigNumberish];
  export type OutputTuple = [creditAccount: string, amount: bigint];
  export interface OutputObject {
    creditAccount: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidateCreditAccountEvent {
  export type InputTuple = [
    creditAccount: AddressLike,
    liquidator: AddressLike,
    to: AddressLike,
    remainingFunds: BigNumberish
  ];
  export type OutputTuple = [
    creditAccount: string,
    liquidator: string,
    to: string,
    remainingFunds: bigint
  ];
  export interface OutputObject {
    creditAccount: string;
    liquidator: string;
    to: string;
    remainingFunds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OpenCreditAccountEvent {
  export type InputTuple = [
    creditAccount: AddressLike,
    onBehalfOf: AddressLike,
    caller: AddressLike,
    referralCode: BigNumberish
  ];
  export type OutputTuple = [
    creditAccount: string,
    onBehalfOf: string,
    caller: string,
    referralCode: bigint
  ];
  export interface OutputObject {
    creditAccount: string;
    onBehalfOf: string;
    caller: string;
    referralCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StartMultiCallEvent {
  export type InputTuple = [creditAccount: AddressLike, caller: AddressLike];
  export type OutputTuple = [creditAccount: string, caller: string];
  export interface OutputObject {
    creditAccount: string;
    caller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawCollateralEvent {
  export type InputTuple = [
    creditAccount: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [
    creditAccount: string,
    token: string,
    amount: bigint,
    to: string
  ];
  export interface OutputObject {
    creditAccount: string;
    token: string;
    amount: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICreditFacadeV3Events extends BaseContract {
  connect(runner?: ContractRunner | null): ICreditFacadeV3Events;
  waitForDeployment(): Promise<this>;

  interface: ICreditFacadeV3EventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "AddCollateral"
  ): TypedContractEvent<
    AddCollateralEvent.InputTuple,
    AddCollateralEvent.OutputTuple,
    AddCollateralEvent.OutputObject
  >;
  getEvent(
    key: "CloseCreditAccount"
  ): TypedContractEvent<
    CloseCreditAccountEvent.InputTuple,
    CloseCreditAccountEvent.OutputTuple,
    CloseCreditAccountEvent.OutputObject
  >;
  getEvent(
    key: "DecreaseDebt"
  ): TypedContractEvent<
    DecreaseDebtEvent.InputTuple,
    DecreaseDebtEvent.OutputTuple,
    DecreaseDebtEvent.OutputObject
  >;
  getEvent(
    key: "Execute"
  ): TypedContractEvent<
    ExecuteEvent.InputTuple,
    ExecuteEvent.OutputTuple,
    ExecuteEvent.OutputObject
  >;
  getEvent(
    key: "FinishMultiCall"
  ): TypedContractEvent<
    FinishMultiCallEvent.InputTuple,
    FinishMultiCallEvent.OutputTuple,
    FinishMultiCallEvent.OutputObject
  >;
  getEvent(
    key: "IncreaseDebt"
  ): TypedContractEvent<
    IncreaseDebtEvent.InputTuple,
    IncreaseDebtEvent.OutputTuple,
    IncreaseDebtEvent.OutputObject
  >;
  getEvent(
    key: "LiquidateCreditAccount"
  ): TypedContractEvent<
    LiquidateCreditAccountEvent.InputTuple,
    LiquidateCreditAccountEvent.OutputTuple,
    LiquidateCreditAccountEvent.OutputObject
  >;
  getEvent(
    key: "OpenCreditAccount"
  ): TypedContractEvent<
    OpenCreditAccountEvent.InputTuple,
    OpenCreditAccountEvent.OutputTuple,
    OpenCreditAccountEvent.OutputObject
  >;
  getEvent(
    key: "StartMultiCall"
  ): TypedContractEvent<
    StartMultiCallEvent.InputTuple,
    StartMultiCallEvent.OutputTuple,
    StartMultiCallEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawCollateral"
  ): TypedContractEvent<
    WithdrawCollateralEvent.InputTuple,
    WithdrawCollateralEvent.OutputTuple,
    WithdrawCollateralEvent.OutputObject
  >;

  filters: {
    "AddCollateral(address,address,uint256)": TypedContractEvent<
      AddCollateralEvent.InputTuple,
      AddCollateralEvent.OutputTuple,
      AddCollateralEvent.OutputObject
    >;
    AddCollateral: TypedContractEvent<
      AddCollateralEvent.InputTuple,
      AddCollateralEvent.OutputTuple,
      AddCollateralEvent.OutputObject
    >;

    "CloseCreditAccount(address,address)": TypedContractEvent<
      CloseCreditAccountEvent.InputTuple,
      CloseCreditAccountEvent.OutputTuple,
      CloseCreditAccountEvent.OutputObject
    >;
    CloseCreditAccount: TypedContractEvent<
      CloseCreditAccountEvent.InputTuple,
      CloseCreditAccountEvent.OutputTuple,
      CloseCreditAccountEvent.OutputObject
    >;

    "DecreaseDebt(address,uint256)": TypedContractEvent<
      DecreaseDebtEvent.InputTuple,
      DecreaseDebtEvent.OutputTuple,
      DecreaseDebtEvent.OutputObject
    >;
    DecreaseDebt: TypedContractEvent<
      DecreaseDebtEvent.InputTuple,
      DecreaseDebtEvent.OutputTuple,
      DecreaseDebtEvent.OutputObject
    >;

    "Execute(address,address)": TypedContractEvent<
      ExecuteEvent.InputTuple,
      ExecuteEvent.OutputTuple,
      ExecuteEvent.OutputObject
    >;
    Execute: TypedContractEvent<
      ExecuteEvent.InputTuple,
      ExecuteEvent.OutputTuple,
      ExecuteEvent.OutputObject
    >;

    "FinishMultiCall()": TypedContractEvent<
      FinishMultiCallEvent.InputTuple,
      FinishMultiCallEvent.OutputTuple,
      FinishMultiCallEvent.OutputObject
    >;
    FinishMultiCall: TypedContractEvent<
      FinishMultiCallEvent.InputTuple,
      FinishMultiCallEvent.OutputTuple,
      FinishMultiCallEvent.OutputObject
    >;

    "IncreaseDebt(address,uint256)": TypedContractEvent<
      IncreaseDebtEvent.InputTuple,
      IncreaseDebtEvent.OutputTuple,
      IncreaseDebtEvent.OutputObject
    >;
    IncreaseDebt: TypedContractEvent<
      IncreaseDebtEvent.InputTuple,
      IncreaseDebtEvent.OutputTuple,
      IncreaseDebtEvent.OutputObject
    >;

    "LiquidateCreditAccount(address,address,address,uint256)": TypedContractEvent<
      LiquidateCreditAccountEvent.InputTuple,
      LiquidateCreditAccountEvent.OutputTuple,
      LiquidateCreditAccountEvent.OutputObject
    >;
    LiquidateCreditAccount: TypedContractEvent<
      LiquidateCreditAccountEvent.InputTuple,
      LiquidateCreditAccountEvent.OutputTuple,
      LiquidateCreditAccountEvent.OutputObject
    >;

    "OpenCreditAccount(address,address,address,uint256)": TypedContractEvent<
      OpenCreditAccountEvent.InputTuple,
      OpenCreditAccountEvent.OutputTuple,
      OpenCreditAccountEvent.OutputObject
    >;
    OpenCreditAccount: TypedContractEvent<
      OpenCreditAccountEvent.InputTuple,
      OpenCreditAccountEvent.OutputTuple,
      OpenCreditAccountEvent.OutputObject
    >;

    "StartMultiCall(address,address)": TypedContractEvent<
      StartMultiCallEvent.InputTuple,
      StartMultiCallEvent.OutputTuple,
      StartMultiCallEvent.OutputObject
    >;
    StartMultiCall: TypedContractEvent<
      StartMultiCallEvent.InputTuple,
      StartMultiCallEvent.OutputTuple,
      StartMultiCallEvent.OutputObject
    >;

    "WithdrawCollateral(address,address,uint256,address)": TypedContractEvent<
      WithdrawCollateralEvent.InputTuple,
      WithdrawCollateralEvent.OutputTuple,
      WithdrawCollateralEvent.OutputObject
    >;
    WithdrawCollateral: TypedContractEvent<
      WithdrawCollateralEvent.InputTuple,
      WithdrawCollateralEvent.OutputTuple,
      WithdrawCollateralEvent.OutputObject
    >;
  };
}
