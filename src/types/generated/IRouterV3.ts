/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type BalanceStruct = { token: AddressLike; balance: BigNumberish };

export type BalanceStructOutput = [token: string, balance: bigint] & {
  token: string;
  balance: bigint;
};

export type PathOptionStruct = {
  target: AddressLike;
  option: BigNumberish;
  totalOptions: BigNumberish;
};

export type PathOptionStructOutput = [
  target: string,
  option: bigint,
  totalOptions: bigint
] & { target: string; option: bigint; totalOptions: bigint };

export type MultiCallStruct = { target: AddressLike; callData: BytesLike };

export type MultiCallStructOutput = [target: string, callData: string] & {
  target: string;
  callData: string;
};

export type RouterResultStruct = {
  amount: BigNumberish;
  minAmount: BigNumberish;
  calls: MultiCallStruct[];
};

export type RouterResultStructOutput = [
  amount: bigint,
  minAmount: bigint,
  calls: MultiCallStructOutput[]
] & { amount: bigint; minAmount: bigint; calls: MultiCallStructOutput[] };

export interface IRouterV3Interface extends Interface {
  getFunction(
    nameOrSignature: "findBestClosePath" | "findOneTokenPath"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "findBestClosePath",
    values: [
      AddressLike,
      BalanceStruct[],
      BalanceStruct[],
      AddressLike[],
      BigNumberish,
      PathOptionStruct[],
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "findOneTokenPath",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike[],
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "findBestClosePath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findOneTokenPath",
    data: BytesLike
  ): Result;
}

export interface IRouterV3 extends BaseContract {
  connect(runner?: ContractRunner | null): IRouterV3;
  waitForDeployment(): Promise<this>;

  interface: IRouterV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  findBestClosePath: TypedContractMethod<
    [
      creditAccount: AddressLike,
      expectedBalances: BalanceStruct[],
      leftoverBalances: BalanceStruct[],
      connectors: AddressLike[],
      slippage: BigNumberish,
      pathOptions: PathOptionStruct[],
      iterations: BigNumberish,
      force: boolean
    ],
    [RouterResultStructOutput],
    "nonpayable"
  >;

  findOneTokenPath: TypedContractMethod<
    [
      tokenIn: AddressLike,
      amount: BigNumberish,
      tokenOut: AddressLike,
      creditAccount: AddressLike,
      connectors: AddressLike[],
      slippage: BigNumberish
    ],
    [RouterResultStructOutput],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "findBestClosePath"
  ): TypedContractMethod<
    [
      creditAccount: AddressLike,
      expectedBalances: BalanceStruct[],
      leftoverBalances: BalanceStruct[],
      connectors: AddressLike[],
      slippage: BigNumberish,
      pathOptions: PathOptionStruct[],
      iterations: BigNumberish,
      force: boolean
    ],
    [RouterResultStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "findOneTokenPath"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      amount: BigNumberish,
      tokenOut: AddressLike,
      creditAccount: AddressLike,
      connectors: AddressLike[],
      slippage: BigNumberish
    ],
    [RouterResultStructOutput],
    "nonpayable"
  >;

  filters: {};
}
