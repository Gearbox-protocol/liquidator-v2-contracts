/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type CollateralDebtDataStruct = {
  debt: BigNumberish;
  cumulativeIndexNow: BigNumberish;
  cumulativeIndexLastUpdate: BigNumberish;
  cumulativeQuotaInterest: BigNumberish;
  accruedInterest: BigNumberish;
  accruedFees: BigNumberish;
  totalDebtUSD: BigNumberish;
  totalValue: BigNumberish;
  totalValueUSD: BigNumberish;
  twvUSD: BigNumberish;
  enabledTokensMask: BigNumberish;
  quotedTokensMask: BigNumberish;
  quotedTokens: AddressLike[];
  _poolQuotaKeeper: AddressLike;
};

export type CollateralDebtDataStructOutput = [
  debt: bigint,
  cumulativeIndexNow: bigint,
  cumulativeIndexLastUpdate: bigint,
  cumulativeQuotaInterest: bigint,
  accruedInterest: bigint,
  accruedFees: bigint,
  totalDebtUSD: bigint,
  totalValue: bigint,
  totalValueUSD: bigint,
  twvUSD: bigint,
  enabledTokensMask: bigint,
  quotedTokensMask: bigint,
  quotedTokens: string[],
  _poolQuotaKeeper: string
] & {
  debt: bigint;
  cumulativeIndexNow: bigint;
  cumulativeIndexLastUpdate: bigint;
  cumulativeQuotaInterest: bigint;
  accruedInterest: bigint;
  accruedFees: bigint;
  totalDebtUSD: bigint;
  totalValue: bigint;
  totalValueUSD: bigint;
  twvUSD: bigint;
  enabledTokensMask: bigint;
  quotedTokensMask: bigint;
  quotedTokens: string[];
  _poolQuotaKeeper: string;
};

export type RevocationPairStruct = { spender: AddressLike; token: AddressLike };

export type RevocationPairStructOutput = [spender: string, token: string] & {
  spender: string;
  token: string;
};

export interface ICreditManagerV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountFactory"
      | "adapterToContract"
      | "addCollateral"
      | "addToken"
      | "addressProvider"
      | "approveCreditAccount"
      | "approveToken"
      | "calcDebtAndCollateral"
      | "closeCreditAccount"
      | "collateralTokenByMask"
      | "collateralTokensCount"
      | "contractToAdapter"
      | "creditAccountInfo"
      | "creditAccounts(uint256,uint256)"
      | "creditAccounts()"
      | "creditAccountsLen"
      | "creditConfigurator"
      | "creditFacade"
      | "enabledTokensMaskOf"
      | "execute"
      | "externalCall"
      | "fees"
      | "flagsOf"
      | "fullCollateralCheck"
      | "getActiveCreditAccountOrRevert"
      | "getBorrowerOrRevert"
      | "getTokenByMask"
      | "getTokenMaskOrRevert"
      | "isLiquidatable"
      | "liquidateCreditAccount"
      | "liquidationThresholds"
      | "ltParams"
      | "manageDebt"
      | "maxEnabledTokens"
      | "name"
      | "openCreditAccount"
      | "pool"
      | "poolQuotaKeeper"
      | "priceOracle"
      | "quotedTokensMask"
      | "revokeAdapterAllowances"
      | "setActiveCreditAccount"
      | "setCollateralTokenData"
      | "setContractAllowance"
      | "setCreditConfigurator"
      | "setCreditFacade"
      | "setFees"
      | "setFlagFor"
      | "setMaxEnabledTokens"
      | "setPriceOracle"
      | "setQuotedMask"
      | "underlying"
      | "updateQuota"
      | "version"
      | "withdrawCollateral"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SetCreditConfigurator"): EventFragment;

  encodeFunctionData(
    functionFragment: "accountFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adapterToContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveCreditAccount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveToken",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcDebtAndCollateral",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeCreditAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralTokenByMask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralTokensCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractToAdapter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creditAccountInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creditAccounts(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creditAccounts()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditAccountsLen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditConfigurator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditFacade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enabledTokensMaskOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "execute", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "externalCall",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "fees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flagsOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fullCollateralCheck",
    values: [AddressLike, BigNumberish, BigNumberish[], BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveCreditAccountOrRevert",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowerOrRevert",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenByMask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMaskOrRevert",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidatable",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateCreditAccount",
    values: [AddressLike, CollateralDebtDataStruct, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationThresholds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ltParams",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "manageDebt",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxEnabledTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openCreditAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolQuotaKeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quotedTokensMask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAdapterAllowances",
    values: [AddressLike, RevocationPairStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setActiveCreditAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralTokenData",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractAllowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditConfigurator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditFacade",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFlagFor",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxEnabledTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuotedMask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateQuota",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adapterToContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcDebtAndCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralTokenByMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralTokensCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractToAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditAccountInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditAccounts(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditAccounts()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditAccountsLen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditConfigurator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditFacade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enabledTokensMaskOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "externalCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flagsOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fullCollateralCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveCreditAccountOrRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowerOrRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenByMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMaskOrRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ltParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manageDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxEnabledTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolQuotaKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quotedTokensMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAdapterAllowances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setActiveCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralTokenData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreditConfigurator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreditFacade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFlagFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxEnabledTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuotedMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateQuota",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
}

export namespace SetCreditConfiguratorEvent {
  export type InputTuple = [newConfigurator: AddressLike];
  export type OutputTuple = [newConfigurator: string];
  export interface OutputObject {
    newConfigurator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICreditManagerV3 extends BaseContract {
  connect(runner?: ContractRunner | null): ICreditManagerV3;
  waitForDeployment(): Promise<this>;

  interface: ICreditManagerV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountFactory: TypedContractMethod<[], [string], "view">;

  adapterToContract: TypedContractMethod<
    [adapter: AddressLike],
    [string],
    "view"
  >;

  addCollateral: TypedContractMethod<
    [
      payer: AddressLike,
      creditAccount: AddressLike,
      token: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  addToken: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  addressProvider: TypedContractMethod<[], [string], "view">;

  approveCreditAccount: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  approveToken: TypedContractMethod<
    [
      creditAccount: AddressLike,
      token: AddressLike,
      spender: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  calcDebtAndCollateral: TypedContractMethod<
    [creditAccount: AddressLike, task: BigNumberish],
    [CollateralDebtDataStructOutput],
    "view"
  >;

  closeCreditAccount: TypedContractMethod<
    [creditAccount: AddressLike],
    [void],
    "nonpayable"
  >;

  collateralTokenByMask: TypedContractMethod<
    [tokenMask: BigNumberish],
    [[string, bigint] & { token: string; liquidationThreshold: bigint }],
    "view"
  >;

  collateralTokensCount: TypedContractMethod<[], [bigint], "view">;

  contractToAdapter: TypedContractMethod<
    [targetContract: AddressLike],
    [string],
    "view"
  >;

  creditAccountInfo: TypedContractMethod<
    [creditAccount: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, string] & {
        debt: bigint;
        cumulativeIndexLastUpdate: bigint;
        cumulativeQuotaInterest: bigint;
        quotaFees: bigint;
        enabledTokensMask: bigint;
        flags: bigint;
        lastDebtUpdate: bigint;
        borrower: string;
      }
    ],
    "view"
  >;

  "creditAccounts(uint256,uint256)": TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [string[]],
    "view"
  >;

  "creditAccounts()": TypedContractMethod<[], [string[]], "view">;

  creditAccountsLen: TypedContractMethod<[], [bigint], "view">;

  creditConfigurator: TypedContractMethod<[], [string], "view">;

  creditFacade: TypedContractMethod<[], [string], "view">;

  enabledTokensMaskOf: TypedContractMethod<
    [creditAccount: AddressLike],
    [bigint],
    "view"
  >;

  execute: TypedContractMethod<[data: BytesLike], [string], "nonpayable">;

  externalCall: TypedContractMethod<
    [creditAccount: AddressLike, target: AddressLike, callData: BytesLike],
    [string],
    "nonpayable"
  >;

  fees: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        feeInterest: bigint;
        feeLiquidation: bigint;
        liquidationDiscount: bigint;
        feeLiquidationExpired: bigint;
        liquidationDiscountExpired: bigint;
      }
    ],
    "view"
  >;

  flagsOf: TypedContractMethod<[creditAccount: AddressLike], [bigint], "view">;

  fullCollateralCheck: TypedContractMethod<
    [
      creditAccount: AddressLike,
      enabledTokensMask: BigNumberish,
      collateralHints: BigNumberish[],
      minHealthFactor: BigNumberish,
      useSafePrices: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  getActiveCreditAccountOrRevert: TypedContractMethod<[], [string], "view">;

  getBorrowerOrRevert: TypedContractMethod<
    [creditAccount: AddressLike],
    [string],
    "view"
  >;

  getTokenByMask: TypedContractMethod<
    [tokenMask: BigNumberish],
    [string],
    "view"
  >;

  getTokenMaskOrRevert: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  isLiquidatable: TypedContractMethod<
    [creditAccount: AddressLike, minHealthFactor: BigNumberish],
    [boolean],
    "view"
  >;

  liquidateCreditAccount: TypedContractMethod<
    [
      creditAccount: AddressLike,
      collateralDebtData: CollateralDebtDataStruct,
      to: AddressLike,
      isExpired: boolean
    ],
    [[bigint, bigint] & { remainingFunds: bigint; loss: bigint }],
    "nonpayable"
  >;

  liquidationThresholds: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  ltParams: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        ltInitial: bigint;
        ltFinal: bigint;
        timestampRampStart: bigint;
        rampDuration: bigint;
      }
    ],
    "view"
  >;

  manageDebt: TypedContractMethod<
    [
      creditAccount: AddressLike,
      amount: BigNumberish,
      enabledTokensMask: BigNumberish,
      action: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        newDebt: bigint;
        tokensToEnable: bigint;
        tokensToDisable: bigint;
      }
    ],
    "nonpayable"
  >;

  maxEnabledTokens: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  openCreditAccount: TypedContractMethod<
    [onBehalfOf: AddressLike],
    [string],
    "nonpayable"
  >;

  pool: TypedContractMethod<[], [string], "view">;

  poolQuotaKeeper: TypedContractMethod<[], [string], "view">;

  priceOracle: TypedContractMethod<[], [string], "view">;

  quotedTokensMask: TypedContractMethod<[], [bigint], "view">;

  revokeAdapterAllowances: TypedContractMethod<
    [creditAccount: AddressLike, revocations: RevocationPairStruct[]],
    [void],
    "nonpayable"
  >;

  setActiveCreditAccount: TypedContractMethod<
    [creditAccount: AddressLike],
    [void],
    "nonpayable"
  >;

  setCollateralTokenData: TypedContractMethod<
    [
      token: AddressLike,
      ltInitial: BigNumberish,
      ltFinal: BigNumberish,
      timestampRampStart: BigNumberish,
      rampDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setContractAllowance: TypedContractMethod<
    [adapter: AddressLike, targetContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setCreditConfigurator: TypedContractMethod<
    [creditConfigurator: AddressLike],
    [void],
    "nonpayable"
  >;

  setCreditFacade: TypedContractMethod<
    [creditFacade: AddressLike],
    [void],
    "nonpayable"
  >;

  setFees: TypedContractMethod<
    [
      feeInterest: BigNumberish,
      feeLiquidation: BigNumberish,
      liquidationDiscount: BigNumberish,
      feeLiquidationExpired: BigNumberish,
      liquidationDiscountExpired: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setFlagFor: TypedContractMethod<
    [creditAccount: AddressLike, flag: BigNumberish, value: boolean],
    [void],
    "nonpayable"
  >;

  setMaxEnabledTokens: TypedContractMethod<
    [maxEnabledTokens: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPriceOracle: TypedContractMethod<
    [priceOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  setQuotedMask: TypedContractMethod<
    [quotedTokensMask: BigNumberish],
    [void],
    "nonpayable"
  >;

  underlying: TypedContractMethod<[], [string], "view">;

  updateQuota: TypedContractMethod<
    [
      creditAccount: AddressLike,
      token: AddressLike,
      quotaChange: BigNumberish,
      minQuota: BigNumberish,
      maxQuota: BigNumberish
    ],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  withdrawCollateral: TypedContractMethod<
    [
      creditAccount: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      to: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "adapterToContract"
  ): TypedContractMethod<[adapter: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "addCollateral"
  ): TypedContractMethod<
    [
      payer: AddressLike,
      creditAccount: AddressLike,
      token: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addressProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approveCreditAccount"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveToken"
  ): TypedContractMethod<
    [
      creditAccount: AddressLike,
      token: AddressLike,
      spender: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calcDebtAndCollateral"
  ): TypedContractMethod<
    [creditAccount: AddressLike, task: BigNumberish],
    [CollateralDebtDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "closeCreditAccount"
  ): TypedContractMethod<[creditAccount: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collateralTokenByMask"
  ): TypedContractMethod<
    [tokenMask: BigNumberish],
    [[string, bigint] & { token: string; liquidationThreshold: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "collateralTokensCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "contractToAdapter"
  ): TypedContractMethod<[targetContract: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "creditAccountInfo"
  ): TypedContractMethod<
    [creditAccount: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, string] & {
        debt: bigint;
        cumulativeIndexLastUpdate: bigint;
        cumulativeQuotaInterest: bigint;
        quotaFees: bigint;
        enabledTokensMask: bigint;
        flags: bigint;
        lastDebtUpdate: bigint;
        borrower: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "creditAccounts(uint256,uint256)"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "creditAccounts()"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "creditAccountsLen"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "creditConfigurator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "creditFacade"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "enabledTokensMaskOf"
  ): TypedContractMethod<[creditAccount: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<[data: BytesLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "externalCall"
  ): TypedContractMethod<
    [creditAccount: AddressLike, target: AddressLike, callData: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fees"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        feeInterest: bigint;
        feeLiquidation: bigint;
        liquidationDiscount: bigint;
        feeLiquidationExpired: bigint;
        liquidationDiscountExpired: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "flagsOf"
  ): TypedContractMethod<[creditAccount: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "fullCollateralCheck"
  ): TypedContractMethod<
    [
      creditAccount: AddressLike,
      enabledTokensMask: BigNumberish,
      collateralHints: BigNumberish[],
      minHealthFactor: BigNumberish,
      useSafePrices: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActiveCreditAccountOrRevert"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBorrowerOrRevert"
  ): TypedContractMethod<[creditAccount: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenByMask"
  ): TypedContractMethod<[tokenMask: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenMaskOrRevert"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isLiquidatable"
  ): TypedContractMethod<
    [creditAccount: AddressLike, minHealthFactor: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidateCreditAccount"
  ): TypedContractMethod<
    [
      creditAccount: AddressLike,
      collateralDebtData: CollateralDebtDataStruct,
      to: AddressLike,
      isExpired: boolean
    ],
    [[bigint, bigint] & { remainingFunds: bigint; loss: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidationThresholds"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "ltParams"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        ltInitial: bigint;
        ltFinal: bigint;
        timestampRampStart: bigint;
        rampDuration: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "manageDebt"
  ): TypedContractMethod<
    [
      creditAccount: AddressLike,
      amount: BigNumberish,
      enabledTokensMask: BigNumberish,
      action: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        newDebt: bigint;
        tokensToEnable: bigint;
        tokensToDisable: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxEnabledTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "openCreditAccount"
  ): TypedContractMethod<[onBehalfOf: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "pool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolQuotaKeeper"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quotedTokensMask"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "revokeAdapterAllowances"
  ): TypedContractMethod<
    [creditAccount: AddressLike, revocations: RevocationPairStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setActiveCreditAccount"
  ): TypedContractMethod<[creditAccount: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCollateralTokenData"
  ): TypedContractMethod<
    [
      token: AddressLike,
      ltInitial: BigNumberish,
      ltFinal: BigNumberish,
      timestampRampStart: BigNumberish,
      rampDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setContractAllowance"
  ): TypedContractMethod<
    [adapter: AddressLike, targetContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCreditConfigurator"
  ): TypedContractMethod<
    [creditConfigurator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCreditFacade"
  ): TypedContractMethod<[creditFacade: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFees"
  ): TypedContractMethod<
    [
      feeInterest: BigNumberish,
      feeLiquidation: BigNumberish,
      liquidationDiscount: BigNumberish,
      feeLiquidationExpired: BigNumberish,
      liquidationDiscountExpired: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFlagFor"
  ): TypedContractMethod<
    [creditAccount: AddressLike, flag: BigNumberish, value: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxEnabledTokens"
  ): TypedContractMethod<
    [maxEnabledTokens: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPriceOracle"
  ): TypedContractMethod<[priceOracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setQuotedMask"
  ): TypedContractMethod<
    [quotedTokensMask: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "underlying"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateQuota"
  ): TypedContractMethod<
    [
      creditAccount: AddressLike,
      token: AddressLike,
      quotaChange: BigNumberish,
      minQuota: BigNumberish,
      maxQuota: BigNumberish
    ],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawCollateral"
  ): TypedContractMethod<
    [
      creditAccount: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      to: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "SetCreditConfigurator"
  ): TypedContractEvent<
    SetCreditConfiguratorEvent.InputTuple,
    SetCreditConfiguratorEvent.OutputTuple,
    SetCreditConfiguratorEvent.OutputObject
  >;

  filters: {
    "SetCreditConfigurator(address)": TypedContractEvent<
      SetCreditConfiguratorEvent.InputTuple,
      SetCreditConfiguratorEvent.OutputTuple,
      SetCreditConfiguratorEvent.OutputObject
    >;
    SetCreditConfigurator: TypedContractEvent<
      SetCreditConfiguratorEvent.InputTuple,
      SetCreditConfiguratorEvent.OutputTuple,
      SetCreditConfiguratorEvent.OutputObject
    >;
  };
}
