/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IPriceOracleV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "convert"
      | "convertFromUSD"
      | "convertToUSD"
      | "getPrice"
      | "getPriceRaw"
      | "getPriceSafe"
      | "priceFeedParams"
      | "priceFeeds"
      | "priceFeedsRaw"
      | "safeConvertToUSD"
      | "setPriceFeed"
      | "setReservePriceFeed"
      | "setReservePriceFeedStatus"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "SetPriceFeed"
      | "SetReservePriceFeed"
      | "SetReservePriceFeedStatus"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "convert",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "convertFromUSD",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToUSD",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceRaw",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceSafe",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeedParams",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeeds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeedsRaw",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "safeConvertToUSD",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [AddressLike, AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservePriceFeed",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservePriceFeedStatus",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertFromUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceRaw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceSafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedsRaw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeConvertToUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservePriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservePriceFeedStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace SetPriceFeedEvent {
  export type InputTuple = [
    token: AddressLike,
    priceFeed: AddressLike,
    stalenessPeriod: BigNumberish,
    skipCheck: boolean,
    trusted: boolean
  ];
  export type OutputTuple = [
    token: string,
    priceFeed: string,
    stalenessPeriod: bigint,
    skipCheck: boolean,
    trusted: boolean
  ];
  export interface OutputObject {
    token: string;
    priceFeed: string;
    stalenessPeriod: bigint;
    skipCheck: boolean;
    trusted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetReservePriceFeedEvent {
  export type InputTuple = [
    token: AddressLike,
    priceFeed: AddressLike,
    stalenessPeriod: BigNumberish,
    skipCheck: boolean
  ];
  export type OutputTuple = [
    token: string,
    priceFeed: string,
    stalenessPeriod: bigint,
    skipCheck: boolean
  ];
  export interface OutputObject {
    token: string;
    priceFeed: string;
    stalenessPeriod: bigint;
    skipCheck: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetReservePriceFeedStatusEvent {
  export type InputTuple = [token: AddressLike, active: boolean];
  export type OutputTuple = [token: string, active: boolean];
  export interface OutputObject {
    token: string;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPriceOracleV3 extends BaseContract {
  connect(runner?: ContractRunner | null): IPriceOracleV3;
  waitForDeployment(): Promise<this>;

  interface: IPriceOracleV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  convert: TypedContractMethod<
    [amount: BigNumberish, tokenFrom: AddressLike, tokenTo: AddressLike],
    [bigint],
    "view"
  >;

  convertFromUSD: TypedContractMethod<
    [amount: BigNumberish, token: AddressLike],
    [bigint],
    "view"
  >;

  convertToUSD: TypedContractMethod<
    [amount: BigNumberish, token: AddressLike],
    [bigint],
    "view"
  >;

  getPrice: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  getPriceRaw: TypedContractMethod<
    [token: AddressLike, reserve: boolean],
    [bigint],
    "view"
  >;

  getPriceSafe: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  priceFeedParams: TypedContractMethod<
    [token: AddressLike],
    [
      [string, bigint, boolean, bigint, boolean] & {
        priceFeed: string;
        stalenessPeriod: bigint;
        skipCheck: boolean;
        decimals: bigint;
        trusted: boolean;
      }
    ],
    "view"
  >;

  priceFeeds: TypedContractMethod<[token: AddressLike], [string], "view">;

  priceFeedsRaw: TypedContractMethod<
    [token: AddressLike, reserve: boolean],
    [string],
    "view"
  >;

  safeConvertToUSD: TypedContractMethod<
    [amount: BigNumberish, token: AddressLike],
    [bigint],
    "view"
  >;

  setPriceFeed: TypedContractMethod<
    [
      token: AddressLike,
      priceFeed: AddressLike,
      stalenessPeriod: BigNumberish,
      trusted: boolean
    ],
    [void],
    "nonpayable"
  >;

  setReservePriceFeed: TypedContractMethod<
    [token: AddressLike, priceFeed: AddressLike, stalenessPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  setReservePriceFeedStatus: TypedContractMethod<
    [token: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "convert"
  ): TypedContractMethod<
    [amount: BigNumberish, tokenFrom: AddressLike, tokenTo: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "convertFromUSD"
  ): TypedContractMethod<
    [amount: BigNumberish, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "convertToUSD"
  ): TypedContractMethod<
    [amount: BigNumberish, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPriceRaw"
  ): TypedContractMethod<
    [token: AddressLike, reserve: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriceSafe"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "priceFeedParams"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [string, bigint, boolean, bigint, boolean] & {
        priceFeed: string;
        stalenessPeriod: bigint;
        skipCheck: boolean;
        decimals: bigint;
        trusted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "priceFeeds"
  ): TypedContractMethod<[token: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "priceFeedsRaw"
  ): TypedContractMethod<
    [token: AddressLike, reserve: boolean],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeConvertToUSD"
  ): TypedContractMethod<
    [amount: BigNumberish, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setPriceFeed"
  ): TypedContractMethod<
    [
      token: AddressLike,
      priceFeed: AddressLike,
      stalenessPeriod: BigNumberish,
      trusted: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReservePriceFeed"
  ): TypedContractMethod<
    [token: AddressLike, priceFeed: AddressLike, stalenessPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReservePriceFeedStatus"
  ): TypedContractMethod<
    [token: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "SetPriceFeed"
  ): TypedContractEvent<
    SetPriceFeedEvent.InputTuple,
    SetPriceFeedEvent.OutputTuple,
    SetPriceFeedEvent.OutputObject
  >;
  getEvent(
    key: "SetReservePriceFeed"
  ): TypedContractEvent<
    SetReservePriceFeedEvent.InputTuple,
    SetReservePriceFeedEvent.OutputTuple,
    SetReservePriceFeedEvent.OutputObject
  >;
  getEvent(
    key: "SetReservePriceFeedStatus"
  ): TypedContractEvent<
    SetReservePriceFeedStatusEvent.InputTuple,
    SetReservePriceFeedStatusEvent.OutputTuple,
    SetReservePriceFeedStatusEvent.OutputObject
  >;

  filters: {
    "SetPriceFeed(address,address,uint32,bool,bool)": TypedContractEvent<
      SetPriceFeedEvent.InputTuple,
      SetPriceFeedEvent.OutputTuple,
      SetPriceFeedEvent.OutputObject
    >;
    SetPriceFeed: TypedContractEvent<
      SetPriceFeedEvent.InputTuple,
      SetPriceFeedEvent.OutputTuple,
      SetPriceFeedEvent.OutputObject
    >;

    "SetReservePriceFeed(address,address,uint32,bool)": TypedContractEvent<
      SetReservePriceFeedEvent.InputTuple,
      SetReservePriceFeedEvent.OutputTuple,
      SetReservePriceFeedEvent.OutputObject
    >;
    SetReservePriceFeed: TypedContractEvent<
      SetReservePriceFeedEvent.InputTuple,
      SetReservePriceFeedEvent.OutputTuple,
      SetReservePriceFeedEvent.OutputObject
    >;

    "SetReservePriceFeedStatus(address,bool)": TypedContractEvent<
      SetReservePriceFeedStatusEvent.InputTuple,
      SetReservePriceFeedStatusEvent.OutputTuple,
      SetReservePriceFeedStatusEvent.OutputObject
    >;
    SetReservePriceFeedStatus: TypedContractEvent<
      SetReservePriceFeedStatusEvent.InputTuple,
      SetReservePriceFeedStatusEvent.OutputTuple,
      SetReservePriceFeedStatusEvent.OutputObject
    >;
  };
}
