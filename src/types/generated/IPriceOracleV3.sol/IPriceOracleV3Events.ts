/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../common";

export interface IPriceOracleV3EventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "SetPriceFeed"
      | "SetReservePriceFeed"
      | "SetReservePriceFeedStatus"
  ): EventFragment;
}

export namespace SetPriceFeedEvent {
  export type InputTuple = [
    token: AddressLike,
    priceFeed: AddressLike,
    stalenessPeriod: BigNumberish,
    skipCheck: boolean,
    trusted: boolean
  ];
  export type OutputTuple = [
    token: string,
    priceFeed: string,
    stalenessPeriod: bigint,
    skipCheck: boolean,
    trusted: boolean
  ];
  export interface OutputObject {
    token: string;
    priceFeed: string;
    stalenessPeriod: bigint;
    skipCheck: boolean;
    trusted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetReservePriceFeedEvent {
  export type InputTuple = [
    token: AddressLike,
    priceFeed: AddressLike,
    stalenessPeriod: BigNumberish,
    skipCheck: boolean
  ];
  export type OutputTuple = [
    token: string,
    priceFeed: string,
    stalenessPeriod: bigint,
    skipCheck: boolean
  ];
  export interface OutputObject {
    token: string;
    priceFeed: string;
    stalenessPeriod: bigint;
    skipCheck: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetReservePriceFeedStatusEvent {
  export type InputTuple = [token: AddressLike, active: boolean];
  export type OutputTuple = [token: string, active: boolean];
  export interface OutputObject {
    token: string;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPriceOracleV3Events extends BaseContract {
  connect(runner?: ContractRunner | null): IPriceOracleV3Events;
  waitForDeployment(): Promise<this>;

  interface: IPriceOracleV3EventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "SetPriceFeed"
  ): TypedContractEvent<
    SetPriceFeedEvent.InputTuple,
    SetPriceFeedEvent.OutputTuple,
    SetPriceFeedEvent.OutputObject
  >;
  getEvent(
    key: "SetReservePriceFeed"
  ): TypedContractEvent<
    SetReservePriceFeedEvent.InputTuple,
    SetReservePriceFeedEvent.OutputTuple,
    SetReservePriceFeedEvent.OutputObject
  >;
  getEvent(
    key: "SetReservePriceFeedStatus"
  ): TypedContractEvent<
    SetReservePriceFeedStatusEvent.InputTuple,
    SetReservePriceFeedStatusEvent.OutputTuple,
    SetReservePriceFeedStatusEvent.OutputObject
  >;

  filters: {
    "SetPriceFeed(address,address,uint32,bool,bool)": TypedContractEvent<
      SetPriceFeedEvent.InputTuple,
      SetPriceFeedEvent.OutputTuple,
      SetPriceFeedEvent.OutputObject
    >;
    SetPriceFeed: TypedContractEvent<
      SetPriceFeedEvent.InputTuple,
      SetPriceFeedEvent.OutputTuple,
      SetPriceFeedEvent.OutputObject
    >;

    "SetReservePriceFeed(address,address,uint32,bool)": TypedContractEvent<
      SetReservePriceFeedEvent.InputTuple,
      SetReservePriceFeedEvent.OutputTuple,
      SetReservePriceFeedEvent.OutputObject
    >;
    SetReservePriceFeed: TypedContractEvent<
      SetReservePriceFeedEvent.InputTuple,
      SetReservePriceFeedEvent.OutputTuple,
      SetReservePriceFeedEvent.OutputObject
    >;

    "SetReservePriceFeedStatus(address,bool)": TypedContractEvent<
      SetReservePriceFeedStatusEvent.InputTuple,
      SetReservePriceFeedStatusEvent.OutputTuple,
      SetReservePriceFeedStatusEvent.OutputObject
    >;
    SetReservePriceFeedStatus: TypedContractEvent<
      SetReservePriceFeedStatusEvent.InputTuple,
      SetReservePriceFeedStatusEvent.OutputTuple,
      SetReservePriceFeedStatusEvent.OutputObject
    >;
  };
}
