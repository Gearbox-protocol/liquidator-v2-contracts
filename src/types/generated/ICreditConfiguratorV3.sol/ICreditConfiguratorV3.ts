/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ICreditConfiguratorV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCollateralToken"
      | "addEmergencyLiquidator"
      | "addressProvider"
      | "allowAdapter"
      | "allowToken"
      | "allowedAdapters"
      | "creditFacade"
      | "creditManager"
      | "emergencyLiquidators"
      | "forbidAdapter"
      | "forbidBorrowing"
      | "forbidToken"
      | "makeTokenQuoted"
      | "rampLiquidationThreshold"
      | "removeEmergencyLiquidator"
      | "resetCumulativeLoss"
      | "setBotList"
      | "setCreditFacade"
      | "setExpirationDate"
      | "setFees"
      | "setLiquidationThreshold"
      | "setMaxCumulativeLoss"
      | "setMaxDebtLimit"
      | "setMaxDebtPerBlockMultiplier"
      | "setMaxEnabledTokens"
      | "setMinDebtLimit"
      | "setPriceOracle"
      | "underlying"
      | "upgradeCreditConfigurator"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddCollateralToken"
      | "AddEmergencyLiquidator"
      | "AllowAdapter"
      | "AllowToken"
      | "CreditConfiguratorUpgraded"
      | "ForbidAdapter"
      | "ForbidToken"
      | "QuoteToken"
      | "RemoveEmergencyLiquidator"
      | "ResetCumulativeLoss"
      | "ScheduleTokenLiquidationThresholdRamp"
      | "SetBorrowingLimits"
      | "SetBotList"
      | "SetCreditFacade"
      | "SetExpirationDate"
      | "SetMaxCumulativeLoss"
      | "SetMaxDebtPerBlockMultiplier"
      | "SetMaxEnabledTokens"
      | "SetPriceOracle"
      | "SetTokenLiquidationThreshold"
      | "UpdateFees"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCollateralToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addEmergencyLiquidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowAdapter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedAdapters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditFacade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyLiquidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forbidAdapter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forbidBorrowing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forbidToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "makeTokenQuoted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rampLiquidationThreshold",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeEmergencyLiquidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resetCumulativeLoss",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBotList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditFacade",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpirationDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationThreshold",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCumulativeLoss",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDebtLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDebtPerBlockMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxEnabledTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDebtLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeCreditConfigurator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEmergencyLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedAdapters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditFacade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyLiquidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forbidAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forbidBorrowing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forbidToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeTokenQuoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rampLiquidationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeEmergencyLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetCumulativeLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBotList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCreditFacade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpirationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxCumulativeLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDebtPerBlockMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxEnabledTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeCreditConfigurator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace AddCollateralTokenEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddEmergencyLiquidatorEvent {
  export type InputTuple = [liquidator: AddressLike];
  export type OutputTuple = [liquidator: string];
  export interface OutputObject {
    liquidator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllowAdapterEvent {
  export type InputTuple = [targetContract: AddressLike, adapter: AddressLike];
  export type OutputTuple = [targetContract: string, adapter: string];
  export interface OutputObject {
    targetContract: string;
    adapter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllowTokenEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditConfiguratorUpgradedEvent {
  export type InputTuple = [creditConfigurator: AddressLike];
  export type OutputTuple = [creditConfigurator: string];
  export interface OutputObject {
    creditConfigurator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ForbidAdapterEvent {
  export type InputTuple = [targetContract: AddressLike, adapter: AddressLike];
  export type OutputTuple = [targetContract: string, adapter: string];
  export interface OutputObject {
    targetContract: string;
    adapter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ForbidTokenEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuoteTokenEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveEmergencyLiquidatorEvent {
  export type InputTuple = [liquidator: AddressLike];
  export type OutputTuple = [liquidator: string];
  export interface OutputObject {
    liquidator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResetCumulativeLossEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScheduleTokenLiquidationThresholdRampEvent {
  export type InputTuple = [
    token: AddressLike,
    liquidationThresholdInitial: BigNumberish,
    liquidationThresholdFinal: BigNumberish,
    timestampRampStart: BigNumberish,
    timestampRampEnd: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    liquidationThresholdInitial: bigint,
    liquidationThresholdFinal: bigint,
    timestampRampStart: bigint,
    timestampRampEnd: bigint
  ];
  export interface OutputObject {
    token: string;
    liquidationThresholdInitial: bigint;
    liquidationThresholdFinal: bigint;
    timestampRampStart: bigint;
    timestampRampEnd: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetBorrowingLimitsEvent {
  export type InputTuple = [minDebt: BigNumberish, maxDebt: BigNumberish];
  export type OutputTuple = [minDebt: bigint, maxDebt: bigint];
  export interface OutputObject {
    minDebt: bigint;
    maxDebt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetBotListEvent {
  export type InputTuple = [botList: AddressLike];
  export type OutputTuple = [botList: string];
  export interface OutputObject {
    botList: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetCreditFacadeEvent {
  export type InputTuple = [creditFacade: AddressLike];
  export type OutputTuple = [creditFacade: string];
  export interface OutputObject {
    creditFacade: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetExpirationDateEvent {
  export type InputTuple = [expirationDate: BigNumberish];
  export type OutputTuple = [expirationDate: bigint];
  export interface OutputObject {
    expirationDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMaxCumulativeLossEvent {
  export type InputTuple = [maxCumulativeLoss: BigNumberish];
  export type OutputTuple = [maxCumulativeLoss: bigint];
  export interface OutputObject {
    maxCumulativeLoss: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMaxDebtPerBlockMultiplierEvent {
  export type InputTuple = [maxDebtPerBlockMultiplier: BigNumberish];
  export type OutputTuple = [maxDebtPerBlockMultiplier: bigint];
  export interface OutputObject {
    maxDebtPerBlockMultiplier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMaxEnabledTokensEvent {
  export type InputTuple = [maxEnabledTokens: BigNumberish];
  export type OutputTuple = [maxEnabledTokens: bigint];
  export interface OutputObject {
    maxEnabledTokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPriceOracleEvent {
  export type InputTuple = [priceOracle: AddressLike];
  export type OutputTuple = [priceOracle: string];
  export interface OutputObject {
    priceOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTokenLiquidationThresholdEvent {
  export type InputTuple = [
    token: AddressLike,
    liquidationThreshold: BigNumberish
  ];
  export type OutputTuple = [token: string, liquidationThreshold: bigint];
  export interface OutputObject {
    token: string;
    liquidationThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateFeesEvent {
  export type InputTuple = [
    feeInterest: BigNumberish,
    feeLiquidation: BigNumberish,
    liquidationPremium: BigNumberish,
    feeLiquidationExpired: BigNumberish,
    liquidationPremiumExpired: BigNumberish
  ];
  export type OutputTuple = [
    feeInterest: bigint,
    feeLiquidation: bigint,
    liquidationPremium: bigint,
    feeLiquidationExpired: bigint,
    liquidationPremiumExpired: bigint
  ];
  export interface OutputObject {
    feeInterest: bigint;
    feeLiquidation: bigint;
    liquidationPremium: bigint;
    feeLiquidationExpired: bigint;
    liquidationPremiumExpired: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICreditConfiguratorV3 extends BaseContract {
  connect(runner?: ContractRunner | null): ICreditConfiguratorV3;
  waitForDeployment(): Promise<this>;

  interface: ICreditConfiguratorV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCollateralToken: TypedContractMethod<
    [token: AddressLike, liquidationThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  addEmergencyLiquidator: TypedContractMethod<
    [liquidator: AddressLike],
    [void],
    "nonpayable"
  >;

  addressProvider: TypedContractMethod<[], [string], "view">;

  allowAdapter: TypedContractMethod<
    [adapter: AddressLike],
    [void],
    "nonpayable"
  >;

  allowToken: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  allowedAdapters: TypedContractMethod<[], [string[]], "view">;

  creditFacade: TypedContractMethod<[], [string], "view">;

  creditManager: TypedContractMethod<[], [string], "view">;

  emergencyLiquidators: TypedContractMethod<[], [string[]], "view">;

  forbidAdapter: TypedContractMethod<
    [adapter: AddressLike],
    [void],
    "nonpayable"
  >;

  forbidBorrowing: TypedContractMethod<[], [void], "nonpayable">;

  forbidToken: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  makeTokenQuoted: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  rampLiquidationThreshold: TypedContractMethod<
    [
      token: AddressLike,
      liquidationThresholdFinal: BigNumberish,
      rampStart: BigNumberish,
      rampDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  removeEmergencyLiquidator: TypedContractMethod<
    [liquidator: AddressLike],
    [void],
    "nonpayable"
  >;

  resetCumulativeLoss: TypedContractMethod<[], [void], "nonpayable">;

  setBotList: TypedContractMethod<
    [newVersion: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCreditFacade: TypedContractMethod<
    [newCreditFacade: AddressLike, migrateParams: boolean],
    [void],
    "nonpayable"
  >;

  setExpirationDate: TypedContractMethod<
    [newExpirationDate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFees: TypedContractMethod<
    [
      feeInterest: BigNumberish,
      feeLiquidation: BigNumberish,
      liquidationPremium: BigNumberish,
      feeLiquidationExpired: BigNumberish,
      liquidationPremiumExpired: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setLiquidationThreshold: TypedContractMethod<
    [token: AddressLike, liquidationThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxCumulativeLoss: TypedContractMethod<
    [newMaxCumulativeLoss: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxDebtLimit: TypedContractMethod<
    [newMaxDebt: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxDebtPerBlockMultiplier: TypedContractMethod<
    [newMaxDebtLimitPerBlockMultiplier: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxEnabledTokens: TypedContractMethod<
    [newMaxEnabledTokens: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinDebtLimit: TypedContractMethod<
    [newMinDebt: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPriceOracle: TypedContractMethod<
    [newVersion: BigNumberish],
    [void],
    "nonpayable"
  >;

  underlying: TypedContractMethod<[], [string], "view">;

  upgradeCreditConfigurator: TypedContractMethod<
    [newCreditConfigurator: AddressLike],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCollateralToken"
  ): TypedContractMethod<
    [token: AddressLike, liquidationThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addEmergencyLiquidator"
  ): TypedContractMethod<[liquidator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addressProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowAdapter"
  ): TypedContractMethod<[adapter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowedAdapters"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "creditFacade"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "creditManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyLiquidators"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "forbidAdapter"
  ): TypedContractMethod<[adapter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "forbidBorrowing"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "forbidToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "makeTokenQuoted"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rampLiquidationThreshold"
  ): TypedContractMethod<
    [
      token: AddressLike,
      liquidationThresholdFinal: BigNumberish,
      rampStart: BigNumberish,
      rampDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeEmergencyLiquidator"
  ): TypedContractMethod<[liquidator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resetCumulativeLoss"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBotList"
  ): TypedContractMethod<[newVersion: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCreditFacade"
  ): TypedContractMethod<
    [newCreditFacade: AddressLike, migrateParams: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExpirationDate"
  ): TypedContractMethod<
    [newExpirationDate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFees"
  ): TypedContractMethod<
    [
      feeInterest: BigNumberish,
      feeLiquidation: BigNumberish,
      liquidationPremium: BigNumberish,
      feeLiquidationExpired: BigNumberish,
      liquidationPremiumExpired: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLiquidationThreshold"
  ): TypedContractMethod<
    [token: AddressLike, liquidationThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxCumulativeLoss"
  ): TypedContractMethod<
    [newMaxCumulativeLoss: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxDebtLimit"
  ): TypedContractMethod<[newMaxDebt: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxDebtPerBlockMultiplier"
  ): TypedContractMethod<
    [newMaxDebtLimitPerBlockMultiplier: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxEnabledTokens"
  ): TypedContractMethod<
    [newMaxEnabledTokens: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinDebtLimit"
  ): TypedContractMethod<[newMinDebt: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPriceOracle"
  ): TypedContractMethod<[newVersion: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "underlying"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "upgradeCreditConfigurator"
  ): TypedContractMethod<
    [newCreditConfigurator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AddCollateralToken"
  ): TypedContractEvent<
    AddCollateralTokenEvent.InputTuple,
    AddCollateralTokenEvent.OutputTuple,
    AddCollateralTokenEvent.OutputObject
  >;
  getEvent(
    key: "AddEmergencyLiquidator"
  ): TypedContractEvent<
    AddEmergencyLiquidatorEvent.InputTuple,
    AddEmergencyLiquidatorEvent.OutputTuple,
    AddEmergencyLiquidatorEvent.OutputObject
  >;
  getEvent(
    key: "AllowAdapter"
  ): TypedContractEvent<
    AllowAdapterEvent.InputTuple,
    AllowAdapterEvent.OutputTuple,
    AllowAdapterEvent.OutputObject
  >;
  getEvent(
    key: "AllowToken"
  ): TypedContractEvent<
    AllowTokenEvent.InputTuple,
    AllowTokenEvent.OutputTuple,
    AllowTokenEvent.OutputObject
  >;
  getEvent(
    key: "CreditConfiguratorUpgraded"
  ): TypedContractEvent<
    CreditConfiguratorUpgradedEvent.InputTuple,
    CreditConfiguratorUpgradedEvent.OutputTuple,
    CreditConfiguratorUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "ForbidAdapter"
  ): TypedContractEvent<
    ForbidAdapterEvent.InputTuple,
    ForbidAdapterEvent.OutputTuple,
    ForbidAdapterEvent.OutputObject
  >;
  getEvent(
    key: "ForbidToken"
  ): TypedContractEvent<
    ForbidTokenEvent.InputTuple,
    ForbidTokenEvent.OutputTuple,
    ForbidTokenEvent.OutputObject
  >;
  getEvent(
    key: "QuoteToken"
  ): TypedContractEvent<
    QuoteTokenEvent.InputTuple,
    QuoteTokenEvent.OutputTuple,
    QuoteTokenEvent.OutputObject
  >;
  getEvent(
    key: "RemoveEmergencyLiquidator"
  ): TypedContractEvent<
    RemoveEmergencyLiquidatorEvent.InputTuple,
    RemoveEmergencyLiquidatorEvent.OutputTuple,
    RemoveEmergencyLiquidatorEvent.OutputObject
  >;
  getEvent(
    key: "ResetCumulativeLoss"
  ): TypedContractEvent<
    ResetCumulativeLossEvent.InputTuple,
    ResetCumulativeLossEvent.OutputTuple,
    ResetCumulativeLossEvent.OutputObject
  >;
  getEvent(
    key: "ScheduleTokenLiquidationThresholdRamp"
  ): TypedContractEvent<
    ScheduleTokenLiquidationThresholdRampEvent.InputTuple,
    ScheduleTokenLiquidationThresholdRampEvent.OutputTuple,
    ScheduleTokenLiquidationThresholdRampEvent.OutputObject
  >;
  getEvent(
    key: "SetBorrowingLimits"
  ): TypedContractEvent<
    SetBorrowingLimitsEvent.InputTuple,
    SetBorrowingLimitsEvent.OutputTuple,
    SetBorrowingLimitsEvent.OutputObject
  >;
  getEvent(
    key: "SetBotList"
  ): TypedContractEvent<
    SetBotListEvent.InputTuple,
    SetBotListEvent.OutputTuple,
    SetBotListEvent.OutputObject
  >;
  getEvent(
    key: "SetCreditFacade"
  ): TypedContractEvent<
    SetCreditFacadeEvent.InputTuple,
    SetCreditFacadeEvent.OutputTuple,
    SetCreditFacadeEvent.OutputObject
  >;
  getEvent(
    key: "SetExpirationDate"
  ): TypedContractEvent<
    SetExpirationDateEvent.InputTuple,
    SetExpirationDateEvent.OutputTuple,
    SetExpirationDateEvent.OutputObject
  >;
  getEvent(
    key: "SetMaxCumulativeLoss"
  ): TypedContractEvent<
    SetMaxCumulativeLossEvent.InputTuple,
    SetMaxCumulativeLossEvent.OutputTuple,
    SetMaxCumulativeLossEvent.OutputObject
  >;
  getEvent(
    key: "SetMaxDebtPerBlockMultiplier"
  ): TypedContractEvent<
    SetMaxDebtPerBlockMultiplierEvent.InputTuple,
    SetMaxDebtPerBlockMultiplierEvent.OutputTuple,
    SetMaxDebtPerBlockMultiplierEvent.OutputObject
  >;
  getEvent(
    key: "SetMaxEnabledTokens"
  ): TypedContractEvent<
    SetMaxEnabledTokensEvent.InputTuple,
    SetMaxEnabledTokensEvent.OutputTuple,
    SetMaxEnabledTokensEvent.OutputObject
  >;
  getEvent(
    key: "SetPriceOracle"
  ): TypedContractEvent<
    SetPriceOracleEvent.InputTuple,
    SetPriceOracleEvent.OutputTuple,
    SetPriceOracleEvent.OutputObject
  >;
  getEvent(
    key: "SetTokenLiquidationThreshold"
  ): TypedContractEvent<
    SetTokenLiquidationThresholdEvent.InputTuple,
    SetTokenLiquidationThresholdEvent.OutputTuple,
    SetTokenLiquidationThresholdEvent.OutputObject
  >;
  getEvent(
    key: "UpdateFees"
  ): TypedContractEvent<
    UpdateFeesEvent.InputTuple,
    UpdateFeesEvent.OutputTuple,
    UpdateFeesEvent.OutputObject
  >;

  filters: {
    "AddCollateralToken(address)": TypedContractEvent<
      AddCollateralTokenEvent.InputTuple,
      AddCollateralTokenEvent.OutputTuple,
      AddCollateralTokenEvent.OutputObject
    >;
    AddCollateralToken: TypedContractEvent<
      AddCollateralTokenEvent.InputTuple,
      AddCollateralTokenEvent.OutputTuple,
      AddCollateralTokenEvent.OutputObject
    >;

    "AddEmergencyLiquidator(address)": TypedContractEvent<
      AddEmergencyLiquidatorEvent.InputTuple,
      AddEmergencyLiquidatorEvent.OutputTuple,
      AddEmergencyLiquidatorEvent.OutputObject
    >;
    AddEmergencyLiquidator: TypedContractEvent<
      AddEmergencyLiquidatorEvent.InputTuple,
      AddEmergencyLiquidatorEvent.OutputTuple,
      AddEmergencyLiquidatorEvent.OutputObject
    >;

    "AllowAdapter(address,address)": TypedContractEvent<
      AllowAdapterEvent.InputTuple,
      AllowAdapterEvent.OutputTuple,
      AllowAdapterEvent.OutputObject
    >;
    AllowAdapter: TypedContractEvent<
      AllowAdapterEvent.InputTuple,
      AllowAdapterEvent.OutputTuple,
      AllowAdapterEvent.OutputObject
    >;

    "AllowToken(address)": TypedContractEvent<
      AllowTokenEvent.InputTuple,
      AllowTokenEvent.OutputTuple,
      AllowTokenEvent.OutputObject
    >;
    AllowToken: TypedContractEvent<
      AllowTokenEvent.InputTuple,
      AllowTokenEvent.OutputTuple,
      AllowTokenEvent.OutputObject
    >;

    "CreditConfiguratorUpgraded(address)": TypedContractEvent<
      CreditConfiguratorUpgradedEvent.InputTuple,
      CreditConfiguratorUpgradedEvent.OutputTuple,
      CreditConfiguratorUpgradedEvent.OutputObject
    >;
    CreditConfiguratorUpgraded: TypedContractEvent<
      CreditConfiguratorUpgradedEvent.InputTuple,
      CreditConfiguratorUpgradedEvent.OutputTuple,
      CreditConfiguratorUpgradedEvent.OutputObject
    >;

    "ForbidAdapter(address,address)": TypedContractEvent<
      ForbidAdapterEvent.InputTuple,
      ForbidAdapterEvent.OutputTuple,
      ForbidAdapterEvent.OutputObject
    >;
    ForbidAdapter: TypedContractEvent<
      ForbidAdapterEvent.InputTuple,
      ForbidAdapterEvent.OutputTuple,
      ForbidAdapterEvent.OutputObject
    >;

    "ForbidToken(address)": TypedContractEvent<
      ForbidTokenEvent.InputTuple,
      ForbidTokenEvent.OutputTuple,
      ForbidTokenEvent.OutputObject
    >;
    ForbidToken: TypedContractEvent<
      ForbidTokenEvent.InputTuple,
      ForbidTokenEvent.OutputTuple,
      ForbidTokenEvent.OutputObject
    >;

    "QuoteToken(address)": TypedContractEvent<
      QuoteTokenEvent.InputTuple,
      QuoteTokenEvent.OutputTuple,
      QuoteTokenEvent.OutputObject
    >;
    QuoteToken: TypedContractEvent<
      QuoteTokenEvent.InputTuple,
      QuoteTokenEvent.OutputTuple,
      QuoteTokenEvent.OutputObject
    >;

    "RemoveEmergencyLiquidator(address)": TypedContractEvent<
      RemoveEmergencyLiquidatorEvent.InputTuple,
      RemoveEmergencyLiquidatorEvent.OutputTuple,
      RemoveEmergencyLiquidatorEvent.OutputObject
    >;
    RemoveEmergencyLiquidator: TypedContractEvent<
      RemoveEmergencyLiquidatorEvent.InputTuple,
      RemoveEmergencyLiquidatorEvent.OutputTuple,
      RemoveEmergencyLiquidatorEvent.OutputObject
    >;

    "ResetCumulativeLoss()": TypedContractEvent<
      ResetCumulativeLossEvent.InputTuple,
      ResetCumulativeLossEvent.OutputTuple,
      ResetCumulativeLossEvent.OutputObject
    >;
    ResetCumulativeLoss: TypedContractEvent<
      ResetCumulativeLossEvent.InputTuple,
      ResetCumulativeLossEvent.OutputTuple,
      ResetCumulativeLossEvent.OutputObject
    >;

    "ScheduleTokenLiquidationThresholdRamp(address,uint16,uint16,uint40,uint40)": TypedContractEvent<
      ScheduleTokenLiquidationThresholdRampEvent.InputTuple,
      ScheduleTokenLiquidationThresholdRampEvent.OutputTuple,
      ScheduleTokenLiquidationThresholdRampEvent.OutputObject
    >;
    ScheduleTokenLiquidationThresholdRamp: TypedContractEvent<
      ScheduleTokenLiquidationThresholdRampEvent.InputTuple,
      ScheduleTokenLiquidationThresholdRampEvent.OutputTuple,
      ScheduleTokenLiquidationThresholdRampEvent.OutputObject
    >;

    "SetBorrowingLimits(uint256,uint256)": TypedContractEvent<
      SetBorrowingLimitsEvent.InputTuple,
      SetBorrowingLimitsEvent.OutputTuple,
      SetBorrowingLimitsEvent.OutputObject
    >;
    SetBorrowingLimits: TypedContractEvent<
      SetBorrowingLimitsEvent.InputTuple,
      SetBorrowingLimitsEvent.OutputTuple,
      SetBorrowingLimitsEvent.OutputObject
    >;

    "SetBotList(address)": TypedContractEvent<
      SetBotListEvent.InputTuple,
      SetBotListEvent.OutputTuple,
      SetBotListEvent.OutputObject
    >;
    SetBotList: TypedContractEvent<
      SetBotListEvent.InputTuple,
      SetBotListEvent.OutputTuple,
      SetBotListEvent.OutputObject
    >;

    "SetCreditFacade(address)": TypedContractEvent<
      SetCreditFacadeEvent.InputTuple,
      SetCreditFacadeEvent.OutputTuple,
      SetCreditFacadeEvent.OutputObject
    >;
    SetCreditFacade: TypedContractEvent<
      SetCreditFacadeEvent.InputTuple,
      SetCreditFacadeEvent.OutputTuple,
      SetCreditFacadeEvent.OutputObject
    >;

    "SetExpirationDate(uint40)": TypedContractEvent<
      SetExpirationDateEvent.InputTuple,
      SetExpirationDateEvent.OutputTuple,
      SetExpirationDateEvent.OutputObject
    >;
    SetExpirationDate: TypedContractEvent<
      SetExpirationDateEvent.InputTuple,
      SetExpirationDateEvent.OutputTuple,
      SetExpirationDateEvent.OutputObject
    >;

    "SetMaxCumulativeLoss(uint128)": TypedContractEvent<
      SetMaxCumulativeLossEvent.InputTuple,
      SetMaxCumulativeLossEvent.OutputTuple,
      SetMaxCumulativeLossEvent.OutputObject
    >;
    SetMaxCumulativeLoss: TypedContractEvent<
      SetMaxCumulativeLossEvent.InputTuple,
      SetMaxCumulativeLossEvent.OutputTuple,
      SetMaxCumulativeLossEvent.OutputObject
    >;

    "SetMaxDebtPerBlockMultiplier(uint8)": TypedContractEvent<
      SetMaxDebtPerBlockMultiplierEvent.InputTuple,
      SetMaxDebtPerBlockMultiplierEvent.OutputTuple,
      SetMaxDebtPerBlockMultiplierEvent.OutputObject
    >;
    SetMaxDebtPerBlockMultiplier: TypedContractEvent<
      SetMaxDebtPerBlockMultiplierEvent.InputTuple,
      SetMaxDebtPerBlockMultiplierEvent.OutputTuple,
      SetMaxDebtPerBlockMultiplierEvent.OutputObject
    >;

    "SetMaxEnabledTokens(uint8)": TypedContractEvent<
      SetMaxEnabledTokensEvent.InputTuple,
      SetMaxEnabledTokensEvent.OutputTuple,
      SetMaxEnabledTokensEvent.OutputObject
    >;
    SetMaxEnabledTokens: TypedContractEvent<
      SetMaxEnabledTokensEvent.InputTuple,
      SetMaxEnabledTokensEvent.OutputTuple,
      SetMaxEnabledTokensEvent.OutputObject
    >;

    "SetPriceOracle(address)": TypedContractEvent<
      SetPriceOracleEvent.InputTuple,
      SetPriceOracleEvent.OutputTuple,
      SetPriceOracleEvent.OutputObject
    >;
    SetPriceOracle: TypedContractEvent<
      SetPriceOracleEvent.InputTuple,
      SetPriceOracleEvent.OutputTuple,
      SetPriceOracleEvent.OutputObject
    >;

    "SetTokenLiquidationThreshold(address,uint16)": TypedContractEvent<
      SetTokenLiquidationThresholdEvent.InputTuple,
      SetTokenLiquidationThresholdEvent.OutputTuple,
      SetTokenLiquidationThresholdEvent.OutputObject
    >;
    SetTokenLiquidationThreshold: TypedContractEvent<
      SetTokenLiquidationThresholdEvent.InputTuple,
      SetTokenLiquidationThresholdEvent.OutputTuple,
      SetTokenLiquidationThresholdEvent.OutputObject
    >;

    "UpdateFees(uint16,uint16,uint16,uint16,uint16)": TypedContractEvent<
      UpdateFeesEvent.InputTuple,
      UpdateFeesEvent.OutputTuple,
      UpdateFeesEvent.OutputObject
    >;
    UpdateFees: TypedContractEvent<
      UpdateFeesEvent.InputTuple,
      UpdateFeesEvent.OutputTuple,
      UpdateFeesEvent.OutputObject
    >;
  };
}
