/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  BatchLiquidator,
  BatchLiquidatorInterface,
} from "../BatchLiquidator";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_router",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "estimateBatch",
    inputs: [
      {
        name: "params",
        type: "tuple[]",
        internalType: "struct RouterLiqParams[]",
        components: [
          {
            name: "creditAccount",
            type: "address",
            internalType: "address",
          },
          {
            name: "expectedBalances",
            type: "tuple[]",
            internalType: "struct Balance[]",
            components: [
              {
                name: "token",
                type: "address",
                internalType: "address",
              },
              {
                name: "balance",
                type: "uint256",
                internalType: "uint256",
              },
            ],
          },
          {
            name: "leftoverBalances",
            type: "tuple[]",
            internalType: "struct Balance[]",
            components: [
              {
                name: "token",
                type: "address",
                internalType: "address",
              },
              {
                name: "balance",
                type: "uint256",
                internalType: "uint256",
              },
            ],
          },
          {
            name: "connectors",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "slippage",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "pathOptions",
            type: "tuple[]",
            internalType: "struct PathOption[]",
            components: [
              {
                name: "target",
                type: "address",
                internalType: "address",
              },
              {
                name: "option",
                type: "uint8",
                internalType: "uint8",
              },
              {
                name: "totalOptions",
                type: "uint8",
                internalType: "uint8",
              },
            ],
          },
          {
            name: "iterations",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "force",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "results",
        type: "tuple[]",
        internalType: "struct LiquidationResult[]",
        components: [
          {
            name: "creditAccount",
            type: "address",
            internalType: "address",
          },
          {
            name: "pathFound",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "executed",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "profit",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "calls",
            type: "tuple[]",
            internalType: "struct MultiCall[]",
            components: [
              {
                name: "target",
                type: "address",
                internalType: "address",
              },
              {
                name: "callData",
                type: "bytes",
                internalType: "bytes",
              },
            ],
          },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "liquidateBatch",
    inputs: [
      {
        name: "params",
        type: "tuple[]",
        internalType: "struct LiqParams[]",
        components: [
          {
            name: "creditFacade",
            type: "address",
            internalType: "address",
          },
          {
            name: "creditAccount",
            type: "address",
            internalType: "address",
          },
          {
            name: "calls",
            type: "tuple[]",
            internalType: "struct MultiCall[]",
            components: [
              {
                name: "target",
                type: "address",
                internalType: "address",
              },
              {
                name: "callData",
                type: "bytes",
                internalType: "bytes",
              },
            ],
          },
        ],
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "success",
        type: "bool[]",
        internalType: "bool[]",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "router",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "";

type BatchLiquidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BatchLiquidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BatchLiquidator__factory extends ContractFactory {
  constructor(...args: BatchLiquidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _router: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_router, overrides || {});
  }
  override deploy(
    _router: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_router, overrides || {}) as Promise<
      BatchLiquidator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BatchLiquidator__factory {
    return super.connect(runner) as BatchLiquidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BatchLiquidatorInterface {
    return new Interface(_abi) as BatchLiquidatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BatchLiquidator {
    return new Contract(address, _abi, runner) as unknown as BatchLiquidator;
  }
}
